version: 2
jobs:
  build:
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Zurich"
      SCRATCH: "/scratch"
    docker:
      - image: docker:19.03.1-git
    working_directory: tmp/src/connectomemapper3
    steps:
      - run:
          name: Install parallel gzip and python2
          command: |
            apk add --no-cache pigz python2
      - restore_cache:
          keys:
            - docker-{{ .Branch }}-{{ epoch }}
            - docker-{{ .Branch }}-
            - docker-master-
            - docker-
          paths:
            - /tmp/cache/docker.tar.gz
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 120m
          command: |
            # Get version, update files.
            THISVERSION=$( python get_version.py )
            echo "THISVERSION : ${THISVERSION}"
            echo "CIRCLE_TAG : ${CIRCLE_TAG}"
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            # Build main docker image
            ls -la ./ubuntu16.04
            e=1 && for i in {1..5}; do
              docker build --cache-from sebastientourbier/connectomemapper-ubuntu16.04 --rm=true --build-arg BUILD_DATE=$CMP_BUILD_DATE --build-arg VCS_REF=$VCS_REF --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" -t sebastientourbier/connectomemapper-ubuntu16.04 ./ubuntu16.04 \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
            # Build CMP BIDS App docker image
            ls -la .
            e=1 && for i in {1..5}; do
              docker build --cache-from sebastientourbier/connectomemapper3 --rm=true --build-arg MAIN_DOCKER="sebastientourbier/connectomemapper-ubuntu16.04" --build-arg MAIN_VERSION=latest --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` --build-arg VCS_REF=`git rev-parse --short HEAD` --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" -t sebastientourbier/connectomemapper3 . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Prune Docker cache (temporary)
          command: docker system prune -f
      - run:
          name: Prune Docker volume (temporary)
          command: docker volume prune --force
      - run:
          name: Display storage information
          command: df -h
      - run:
          name: Keep only connectomemapper docker image
          command: |
            docker rmi $(docker images | grep connectomemapper-ubuntu16.04 | tr -s ' ' | cut -d ' ' -f 3)
      - run:
          name: Save Docker Image
          no_output_timeout: 40m
          command: |
            # Get version, update files.
            THISVERSION=$( python get_version.py )
            mkdir -p /tmp/cache
            docker save sebastientourbier/connectomemapper3 \
            | pigz -8 -p 3 > /tmp/cache/docker.tar.gz
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/docker.tar.gz
            - src/connectomemapper3

  get_data:
    machine:
      # Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      image: ubuntu-1604:201903-01
    working_directory: /home/circleci/data
    steps:
      - run:
          name: Get test data from ds-sample
          command: |
            mkdir -p /tmp/data
            wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -v \
              -O ds-sample.tar.gz "https://zenodo.org/record/3712762/files/ds-sample.tar.gz?download=1"
            tar xvzf ds-sample.tar.gz -C /tmp/data/
            echo "Dataset ds-sample has been successfully downloaded"

      - run:
          name: Get FreeSurfer derivatives for ds-sample
          command: |
            mkdir -p /tmp/data/ds-sample/derivatives
            wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -v \
              -O freesurfer.tar.gz "https://zenodo.org/record/3712762/files/freesurfer.tar.gz?download=1"
            tar xvzf freesurfer.tar.gz -C /tmp/data/ds-sample/derivatives
            echo "FreeSurfer derivatives of ds-sample  have been successfully downloaded"

      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/data/ds-sample/code
            cd /tmp/data/ds-sample/code
            echo `echo c2ViYXN0aWVuLnRvdXJiaWVyMUBnbWFpbC5jb20KMzAwNzYKICpDYUpVZ0VMQlJEYkEKIEZTMkkyWDNwNkpicWcK== | base64 -di` > /tmp/data/ds-sample/code/license.txt
            cat /tmp/data/ds-sample/code/license.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - data
      - save_cache:
         key: data-{{ epoch }}
         paths:
            - /tmp/data

  # update_cache:
  #   machine:
  #     # Ubuntu 14.04 with Docker 17.10.0-ce
  #     image: circleci/classic:201711-01
  #   working_directory: /tmp/src/multiscalebrainparcellator
  #   steps:
  #     - attach_workspace:
  #         at: /tmp
  #     - save_cache:
  #        key: docker-{{ .Branch }}-{{ epoch }}
  #        paths:
  #          - /tmp/cache/docker.tar.gz

  test:
    machine:
      # Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      image: ubuntu-1604:201903-01

    working_directory: /tmp/data/ds-sample
    environment:
      - FS_LICENSE: /tmp/data/ds-sample/code/license.txt
    steps:
      - checkout:
          path: /home/circleci/src/connectomemapper3
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/connectomemapper3
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?ds-sample\]' )" != "" ]]; then
              echo "Skipping ds-sample build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      # - restore_cache:
      #     keys:
      #       - ds-sample-derivatives-{{ .Branch }}-{{ epoch }}
      #       - ds-sample-derivatives-{{ .Branch }}
      #       - ds-sample-derivatives-master
      #       - ds-sample-derivatives-
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo apt-get update && sudo apt-get -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run anatomical and diffusion pipelines on ds-sample
          no_output_timeout: 6h
          command: |
            # Get version, update files.
            #THISVERSION=v$( python /home/circleci/src/connectomemapper3/get_version.py )
            #echo "THISVERSION : ${THISVERSION}"
            cat /tmp/data/ds-sample/code/license.txt
            ls -la  /tmp/data/ds-sample
            ls -la  /tmp/data/ds-sample/code
            ls -la  /tmp/data/ds-sample/derivatives

            #Remove existing config files in ds-sample (Make sure we are using the ones stored in the repo)
            rm /tmp/data/ds-sample/code/*.ini

            #Execute BIDS App
            docker run -it --rm \
                -v /tmp/data/ds-sample:/bids_dir \
                -v /tmp/data/ds-sample/derivatives:/output_dir \
                -v /home/circleci/src/connectomemapper3/config:/config \
                sebastientourbier/connectomemapper3 \
                /bids_dir /output_dir participant --participant_label 01 --session_label 01 \
                --anat_pipeline_config /config/ref_anatomical_config.ini \
                --dwi_pipeline_config /config/ref_diffusion_config.ini \
                --fs_license /bids_dir/code/license.txt

      # - save_cache:
      #    key: ds-sample-derivatives-{{ .Branch }}-{{ epoch }}
      #    paths:
      #       - /tmp/data/ds-sample/derivatives
      - run:
          name: Checking outputs of Connectome Mapper run
          command: |
            mkdir -p /tmp/data/ds-sample/test
            ls -la /tmp/data/ds-sample/derivatives/nipype/sub-01/ses-01/diffusion_pipeline/preprocessing_stage/motion_correction/
            # Get all files in derivatives except the _*.json interface hash generated by nipype (find) / remove the full path of the derivatives (sed) / sort the files and write it to a text file
            sudo find /tmp/data/ds-sample/derivatives -path */figures -prune -o -not -name "_*.json" -type f -print | sed s+/tmp/data/ds-sample/derivatives/++ | sort > /tmp/data/ds-sample/test/outputs.out
            diff /home/circleci/src/connectomemapper3/.circleci/ds-sample_outputs.txt /tmp/data/ds-sample/test/outputs.out
            exit $?
      - run:
          name: Clean working directory
          when: always
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/data/ds-sample
            find /tmp/data/ds-sample/derivatives -not -name "*.svg" -not -name "*.html" -not -name "*.rst" \
                -not -name "*.mat" -not -name "*.gpickle" -not -name "*.lta" -not -name "*.json" -not -name "*.txt" -not -name "*.pklz" -type f -delete
      - store_artifacts:
          path: /tmp/data/ds-sample/test
      - store_artifacts:
          path: /tmp/data/ds-sample/derivatives/cmp
      - store_artifacts:
          path: /tmp/data/ds-sample/derivatives/nipype

  build_docs:
    machine:
      # Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      image: ubuntu-1604:201903-01
    working_directory: /home/circleci/out/docs
    steps:
      - checkout:
          path: /home/circleci/src/connectomemapper3
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/connectomemapper3
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?docs\]' )" != "" ]]; then
              echo "Skipping documentation build job"
              circleci step halt
            fi

      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo apt-get update && sudo apt-get -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Connectome Mapper 3 documentation
          no_output_timeout: 2h
          command: |
            docker run -ti --rm=false -v $PWD:/_build_html \
              --entrypoint=sphinx-build sebastientourbier/connectomemapper3:latest \
              -T -E -b html -d _build/doctrees-readthedocs -W -D \
              language=en /root/src/connectomemapper3/docs/ /_build_html 2>&1 \
              | tee $PWD/builddocs.log
            cat $PWD/builddocs.log
            grep -qv "ERROR" $PWD/builddocs.log
      - store_artifacts:
          path: /home/circleci/out/docs

  deploy_docker_release:
    machine:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      image: ubuntu-1604:201903-01
    working_directory: /tmp/src/connectomemapper3
    steps:
      - checkout:
          path: /home/circleci/src/connectomemapper3
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo apt-get update && sudo apt-get -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy release with version tag to Docker Hub
          no_output_timeout: 40m
          command: |
            # Get version, update files.
            THISVERSION=$( python /home/circleci/src/connectomemapper3/get_version.py )
            echo "THISVERSION : ${THISVERSION}"
            echo "CIRCLE_TAG : ${CIRCLE_TAG}"

            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker tag sebastientourbier/connectomemapper3 sebastientourbier/connectomemapper-bidsapp:$CIRCLE_TAG
                docker push sebastientourbier/connectomemapper-bidsapp:$CIRCLE_TAG
              fi
            fi

  deploy_docker_latest:
    machine:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      image: ubuntu-1604:201903-01
    working_directory: /tmp/src/connectomemapper3
    steps:
      - checkout:
          path: /home/circleci/src/connectomemapper3
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo apt-get update && sudo apt-get -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy latest master to Docker Hub
          no_output_timeout: 40m
          command: |
            # Get version, update files.
            THISVERSION=$( python /home/circleci/src/connectomemapper3/get_version.py )
            echo "THISVERSION : ${THISVERSION}"
            echo "CIRCLE_BRANCH : ${CIRCLE_BRANCH}"

            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag sebastientourbier/connectomemapper3 sebastientourbier/connectomemapper-bidsapp:latest
              docker push sebastientourbier/connectomemapper-bidsapp:latest
            fi

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      # - build_docs:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore:
      #           - /ds-sample\/.*/
      #       tags:
      #         only: /.*/

      # - update_cache:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore:
      #           - /docs?\/.*/
      #       tags:
      #         only: /.*/

      - test:
          requires:
            - get_data
            # - update_cache
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - deploy_docker_release:
          requires:
            - build
            # - build_docs
            - test
          filters:
            # ignore any commit on any branch by default
            branches:
              ignore: /.*/
              # only: master
            # only act on version tags
            tags:
              only: /^v.*/

      - deploy_docker_latest:
          requires:
            - build
            # - build_docs
            - test
          filters:
            # ignore any commit on any branch by default
            branches:
              only: master

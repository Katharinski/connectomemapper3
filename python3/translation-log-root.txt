--- /home/localadmin/Softwares/GitHub/connectomemapper3/run.py	(original)
+++ /home/localadmin/Softwares/GitHub/connectomemapper3/run.py	(refactored)
@@ -1,495 +1 @@
-#!/usr/bin/env python2
-# -*-coding:Latin-1 -*
-
-# Copyright (C) 2009-2020, Ecole Polytechnique Federale de Lausanne (EPFL) and
-# Hospital Center and University of Lausanne (UNIL-CHUV), Switzerland
-# All rights reserved.
-#
-#  This software is distributed under the open-source license Modified BSD.
-
-# Remove warnings visible whenever you import scipy (or another package) that was compiled against an older numpy than is installed.
-import warnings
-
-warnings.filterwarnings("ignore", message="numpy.dtype size changed")
-warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
-
-# Imports
-import argparse
-import os
-import sys
-import shutil
-import subprocess
-import multiprocessing
-import nibabel
-import numpy
-from glob import glob
-
-# Own imports
-from cmp.project import CMP_Project_Info
-from cmp.info import __version__
-from cmp import parser
-from cmtklib.util import bcolors
-
-
-# __version__ = open(os.path.join(os.path.dirname(os.path.realpath(__file__)),
-#                                 'version')).read()
-
-def create_cmp_command(project, run_anat, run_dmri, run_fmri):
-    cmd = []
-    cmd.append("connectomemapper3")
-    cmd.append("--bids_dir")
-    cmd.append(project.base_directory)
-    cmd.append("--output_dir")
-    cmd.append(project.output_directory)
-    cmd.append("--participant_label")
-    cmd.append(project.subject)
-    
-    if project.subject_session != '':
-        cmd.append("--session_label")
-        cmd.append(project.subject_session)
-        
-        # TODO: review how to handle anatomical pipeline processing
-    if run_anat:
-        cmd.append("--anat_pipeline_config")
-        cmd.append(project.anat_config_file)
-    else:
-        print("ERROR: anatomical pipeline is mandatory")
-    
-    if run_dmri:
-        cmd.append("--dwi_pipeline_config")
-        cmd.append(project.dmri_config_file)
-    else:
-        print("INFO: diffusion pipeline not performed")
-    
-    if run_fmri:
-        cmd.append("--func_pipeline_config")
-        cmd.append(project.fmri_config_file)
-    else:
-        print("INFO: functional pipeline not performed")
-    
-    return ' '.join(cmd)
-
-
-def readLineByLine(filename):
-    with open(filename, 'r') as f:  # Use with statement to correctly close the file when you read all the lines.
-        for line in f:  # Use implicit iterator over filehandler to minimize memory used
-            yield line.strip(
-                '\n')  # Use generator, to minimize memory used, removing trailing carriage return as it is not part of the command.
-
-
-def create_subject_configuration_from_ref(project, ref_conf_file, pipeline_type, multiproc_number_of_cores=1):
-    subject_derivatives_dir = os.path.join(project.output_directory)
-    
-    # print('project.subject_session: {}'.format(project.subject_session))
-    
-    if project.subject_session != '':  # Session structure
-        # print('With session : {}'.format(project.subject_session))
-        subject_conf_file = os.path.join(subject_derivatives_dir, 'cmp', project.subject, project.subject_session,
-                                         "{}_{}_{}_config.ini".format(project.subject, project.subject_session,
-                                                                      pipeline_type))
-    else:
-        # print('With NO session ')
-        subject_conf_file = os.path.join(subject_derivatives_dir, 'cmp', project.subject,
-                                         "{}_{}_config.ini".format(project.subject, pipeline_type))
-    
-    if os.path.isfile(subject_conf_file):
-        print "WARNING: rewriting config file {}".format(subject_conf_file)
-        os.remove(subject_conf_file)
-    
-    # Change relative path to absolute path if needed (required when using singularity)
-    if not os.path.isabs(ref_conf_file):
-        ref_conf_file = os.path.abspath(ref_conf_file)
-    
-    # Copy and edit appropriate fields/lines
-    f = open(subject_conf_file, 'w')
-    for line in readLineByLine(ref_conf_file):
-        if "subject = " in line:
-            f.write("subject = {}\n".format(project.subject))
-        elif "subjects = " in line:
-            f.write("subjects = {}\n".format(project.subjects))
-        elif "subject_sessions = " in line:
-            f.write("subject_sessions = {}\n".format(project.subject_sessions))
-        elif "subject_session = " in line:
-            f.write("subject_session = {}\n".format(project.subject_session))
-        elif "number_of_cores = " in line:
-            f.write("number_of_cores = {}\n".format(multiproc_number_of_cores))
-        else:
-            f.write("{}\n".format(line))
-    f.close()
-    
-    return subject_conf_file
-
-
-def manage_processes(proclist):
-    for proc in proclist:
-        if proc.poll() is not None:
-            proclist.remove(proc)
-
-
-def clean_cache(bids_root):
-    print('> Clean docker image cache stored in /tmp')
-    # Clean cache (issue related that the dataset directory is mounted into /tmp,
-    # which is used for caching by java/matlab/matplotlib/xvfb-run in the docker image)
-    
-    # Folder can be code/ derivatives/ sub-*/ .datalad/ .git/
-    # File can be README.txt CHANGES.txt participants.tsv project_description.json
-    
-    for f in glob(os.path.join(bids_root, '._java*')):
-        print('... DEL: {}'.format(f))
-        try:
-            os.remove(f)
-        except:
-            pass
-    
-    for f in glob(os.path.join(bids_root, 'mri_segstats.tmp*')):
-        print('... DEL: {}'.format(f))
-        try:
-            os.remove(f)
-        except:
-            pass
-    
-    for d in glob(os.path.join(bids_root, 'MCR_*')):
-        print('... DEL: {}'.format(d))
-        try:
-            shutil.rmtree(d)
-        except:
-            pass
-    
-    # for d in glob(os.path.join(bids_root,'matplotlib*')):
-    #     print('... DEL: {}'.format(d))
-    #     try:
-    #         shutil.rmtree(d)
-    #     except:
-    #         pass
-    
-    # for d in glob(os.path.join(bids_root,'xvfb-run.*')):
-    #     print('... DEL: {}'.format(d))
-    #     shutil.rmtree(d)
-    #
-    # for d in glob(os.path.join(bids_root,'.X11*')):
-    #     print('... DEL: {}'.format(d))
-    #     shutil.rmtree(d)
-    #
-    # for d in glob(os.path.join(bids_root,'.X11-unix')):
-    #     print('... DEL: {}'.format(d))
-    #     shutil.rmtree(d)
-    
-    for f in glob(os.path.join(bids_root, '.X99*')):
-        print('... DEL: {}'.format(f))
-        try:
-            os.remove(f)
-        except:
-            pass
-
-
-def run(command, env={}, log_filename={}):
-    merged_env = os.environ
-    merged_env.update(env)
-    
-    with open(log_filename, 'w+') as log:
-        process = subprocess.Popen(command, stdout=log,
-                                   stderr=log, shell=True,
-                                   env=merged_env)
-    
-    return process
-    # while True:
-    #     line = process.stdout.readline()
-    #     line = str(line)[:-1]
-    #     print(line)
-    #     if line == '' and process.poll() is not None:
-    #         break
-    # if process.returncode != 0:
-    #     raise Exception("Non zero return code: %d"%process.returncode)
-
-
-# Initialize random generator for enhanced reproducibility 
-numpy.random.seed(1234)
-
-cmp_parser = parser.get()
-args = cmp_parser.parse_args()
-
-print('> BIDS dataset: {}'.format(args.bids_dir))
-
-# if not args.skip_bids_validator:
-#     run('bids-validator %s'%args.bids_dir)
-
-subjects_to_analyze = []
-# only for a subset of subjects
-if args.participant_label:
-    subjects_to_analyze = args.participant_label
-# for all subjects
-else:
-    subject_dirs = glob(os.path.join(args.bids_dir, "sub-*"))
-    subjects_to_analyze = [subject_dir.split("-")[-1] for subject_dir in subject_dirs]
-
-print("> Subjects to analyze : {}".format(subjects_to_analyze))
-
-# Derivatives directory creation if it does not exist
-derivatives_dir = os.path.abspath(args.output_dir)
-if not os.path.isdir(derivatives_dir):
-    os.makedirs(derivatives_dir)
-
-tools = ['cmp', 'freesurfer', 'nipype']
-
-for tool in tools:
-    tool_dir = os.path.join(args.output_dir, tool)
-    if not os.path.isdir(tool_dir):
-        os.makedirs(tool_dir)
-
-# Make sure freesurfer is happy with the license
-print('> Set $FS_LICENSE which points to FreeSurfer license location (BIDS App)')
-

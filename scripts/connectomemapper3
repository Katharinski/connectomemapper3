#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import os
import argparse

import subprocess

#BIDS import
from bids import BIDSLayout

#CMP imports

import cmp.project
from cmp.info import __version__, __current_year__,__copyright__ 

import warnings
warnings.filterwarnings("ignore", message="UserWarning: No valid root directory found for domain 'derivatives'. Falling back on the Layout's root directory. If this isn't the intended behavior, make sure the config file for this domain includes a 'root' key.")


def info():
    print("\nConnectome Mapper {}".format(__version__))
    print("""{}""".format(__copyright__ ))

def usage():
    print("Usage 1: connectomemapper3 bids_folder sub-<label> (ses-<label>) anatomical_ini_file process_anatomical")
    print("Usage 2: connectomemapper3 bids_folder sub-<label> (ses-<label>) anatomical_ini_file process_anatomical diffusion_ini_file process_diffusion")
    print("Usage 3: connectomemapper3 bids_folder sub-<label> (ses-<label>) anatomical_ini_file process_anatomical diffusion_ini_file process_diffusion fmri_ini_file process_fmri")
    print("")
    print("bids_directory <Str> : full path of root directory of bids dataset")
    print("sub-<label> <Str>: subject name")
    print("anatomical_config_ini <Str>: full path of .ini configuration file for anatomical pipeline")
    print("process_anatomical <Bool> : If True, process anatomical pipeline")
    print("diffusion_config_ini_file <Str>: full path of .ini configuration file for diffusion pipeline")
    print("process_diffusion <Bool> : If True, process diffusion pipeline")
    print("fmri_config_ini_file <Str>: full path of .ini configuration file for fMRI pipeline")
    print("process_fmri <Bool> : If True, process fMRI pipeline")

# Checks the needed dependencies. We call directly the functions instead
# of just checking existence in $PATH in order to handl missing libraries.
# Note that not all the commands give the awaited 1 exit code...
def dep_check():

    nul = open(os.devnull, 'w')

    error = ""

    # Check for FSL
    if subprocess.call("fslorient",stdout=nul,stderr=nul,shell=True) != 255:
        error = """FSL not installed or not working correctly. Check that the
FSL_DIR variable is exported and the fsl.sh setup script is sourced."""

    # Check for Freesurfer
    if subprocess.call("mri_info",stdout=nul,stderr=nul,shell=True) != 1:
        error = """FREESURFER not installed or not working correctly. Check that the
FREESURFER_HOME variable is exported and the SetUpFreeSurfer.sh setup
script is sourced."""

    # Check for MRtrix
    # if subprocess.call("mrconvert",stdout=nul,stderr=nul,shell=True) != 255:
    #     error = """MRtrix3 not installed or not working correctly. Check that PATH variable is updated with MRtrix3 binary (bin) directory."""

    # Check for DTK
#     if subprocess.call("dti_recon",stdout=nul,stderr=nul,shell=True) != 0 or "DSI_PATH" not in os.environ:
#         error = """Diffusion Toolkit not installed or not working correctly. Check that
# the DSI_PATH variable is exported and that the dtk binaries (e.g. dti_recon) are in
# your path."""

    # Check for DTB
#     if subprocess.call("DTB_dtk2dir",stdout=nul,stderr=nul,shell=True) != 1:
#         error = """DTB binaries not installed or not working correctly. Check that the
# DTB binaries (e.g. DTB_dtk2dir) are in your path and don't give any error."""

    if error != "":
        print error
        sys.exit(2)

def create_parser():
    p = argparse.ArgumentParser(description='Connectome Mapper 3 main script.')
    p.add_argument('--bids_dir', required=True, help='The directory with the input dataset '
                        'formatted according to the BIDS standard.')
    p.add_argument('--output_dir', required=True, help='The directory where the output files '
                        'should be stored. If you are running group level analysis '
                        'this folder should be prepopulated with the results of the'
                        'participant level analysis.')
    p.add_argument('--participant_label', required=True, help='The label of the participant'
                        'that should be analyzed. The label corresponds to'
                       '<participant_label> from the BIDS spec '
                       '(so it DOES include "sub-"')
    p.add_argument('--anat_pipeline_config', required=True, help='Configuration .txt file for processing stages of the anatomical MRI processing pipeline')

    p.add_argument('--dwi_pipeline_config', help='Configuration .txt file for processing stages of the diffusion MRI processing pipeline')
    p.add_argument('--func_pipeline_config', help='Configuration .txt file for processing stages of the fMRI processing pipeline')
    
    p.add_argument('--session_label', help='The label of the participant session'
                    'that should be analyzed. The label corresponds to'
                   '<session_label> from the BIDS spec '
                   '(so it DOES include "ses-"')

    p.add_argument('-v', '--version', action='version',
                        version='Connectome Mapper version {}'.format(__version__))
    return p



if __name__ == "__main__":

    parser = create_parser()
    args = parser.parse_args()

    # check dependencies
    dep_check()

    # add current directory to the path, useful if DTB_ bins not installed
    os.environ["PATH"] += os.pathsep + os.path.dirname(sys.argv[0])

    # version and copyright message
    info()

    project = cmp.project.CMP_Project_Info()
    project.base_directory = os.path.abspath(args.bids_dir)
    project.output_directory = os.path.abspath(args.output_dir)
    project.subjects = ['{}'.format(args.participant_label)]
    project.subject = '{}'.format(args.participant_label)
    
    try:
        bids_layout = BIDSLayout(project.base_directory)
    except:
        print("Exception : Raised at BIDSLayout")
        sys.exit(1)

    if args.session_label is not None:
        project.subject_sessions = ['{}'.format(args.session_label)]
        project.subject_session = '{}'.format(args.session_label)
        print("INFO : Detected session(s)")
    else:
        print("INFO : No detected session")
        project.subject_sessions = ['']
        project.subject_session = ''

    project.anat_config_file = os.path.abspath(args.anat_pipeline_config)

    # Perform only the anatomical pipeline
    if args.dwi_pipeline_config is None and args.func_pipeline_config is None:

        anat_pipeline = cmp.project.init_anat_project(project, False)
        if anat_pipeline != None:
            anat_valid_inputs = anat_pipeline.check_input(bids_layout, gui=False)
            if anat_valid_inputs:
                anat_pipeline.process()
            else:
                sys.exit(1)

    # Perform the anatomical and the diffusion pipelines
    elif args.dwi_pipeline_config is not None and args.func_pipeline_config is None:

        project.dmri_config_file = os.path.abspath(args.dwi_pipeline_config)

        anat_pipeline = cmp.project.init_anat_project(project, False)
        if anat_pipeline != None:
            anat_valid_inputs = anat_pipeline.check_input(bids_layout, gui=False)

            if anat_valid_inputs:
                print(">> Process anatomical pipeline")
                anat_pipeline.process()
            else:
                print("ERROR : Invalid inputs")
                sys.exit(1)

        anat_valid_outputs, msg = anat_pipeline.check_output()

        if anat_valid_outputs:
            dmri_valid_inputs, dmri_pipeline = cmp.project.init_dmri_project(project, bids_layout, False)
            if dmri_pipeline != None:
                dmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
                dmri_pipeline.atlas_info = anat_pipeline.atlas_info
                #print sys.argv[offset+7]
                if dmri_valid_inputs:
                    dmri_pipeline.process()
                else:
                    print("   ... ERROR : Invalid inputs")
                    sys.exit(1)
        else:
            print msg
            sys.exit(1)

    # Perform the anatomical and the fMRI pipelines
    elif args.dwi_pipeline_config is None and args.func_pipeline_config is not None:

        project.fmri_config_file = os.path.abspath(args.func_pipeline_config)

        anat_pipeline = cmp.project.init_anat_project(project, False)
        if anat_pipeline != None:
            anat_valid_inputs = anat_pipeline.check_input(bids_layout,gui=False)

            if anat_valid_inputs:
                print(">> Process anatomical pipeline")
                anat_pipeline.process()
            else:
                print("ERROR : Invalid inputs")
                sys.exit(1)

        anat_valid_outputs, msg = anat_pipeline.check_output()
        project.freesurfer_subjects_dir = anat_pipeline.stages['Segmentation'].config.freesurfer_subjects_dir
        project.freesurfer_subject_id = anat_pipeline.stages['Segmentation'].config.freesurfer_subject_id

        if anat_valid_outputs:
            fmri_valid_inputs, fmri_pipeline = cmp.project.init_fmri_project(project, bids_layout, False)
            if fmri_pipeline != None:
                fmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
                fmri_pipeline.atlas_info = anat_pipeline.atlas_info
                #fmri_pipeline.subjects_dir = anat_pipeline.stages['Segmentation'].config.freesurfer_subjects_dir
                #fmri_pipeline.subject_id = anat_pipeline.stages['Segmentation'].config.freesurfer_subject_id
                #print('Freesurfer subjects dir: {}'.format(fmri_pipeline.subjects_dir))
                #print('Freesurfer subject id: {}'.format(fmri_pipeline.subject_id))

                # print sys.argv[offset+9]
                if fmri_valid_inputs:
                    print(">> Process fmri pipeline")
                    fmri_pipeline.process()
                else:
                    print("   ... ERROR : Invalid inputs")
                    sys.exit(1)
        else:
            print(msg)
            sys.exit(1)

    # Perform all pipelines (anatomical/diffusion/fMRI)
    elif args.dwi_pipeline_config is not None and args.func_pipeline_config is not None:

        project.dmri_config_file = os.path.abspath(args.dwi_pipeline_config)
        project.fmri_config_file = os.path.abspath(args.func_pipeline_config)

        anat_pipeline = cmp.project.init_anat_project(project, False)
        if anat_pipeline != None:
            anat_valid_inputs = anat_pipeline.check_input(bids_layout,gui=False)

            if anat_valid_inputs:
                print(">> Process anatomical pipeline")
                anat_pipeline.process()
            else:
                print("   ... ERROR : Invalid inputs")
                sys.exit(1)

        anat_valid_outputs, msg = anat_pipeline.check_output()
        project.freesurfer_subjects_dir = anat_pipeline.stages['Segmentation'].config.freesurfer_subjects_dir
        project.freesurfer_subject_id = anat_pipeline.stages['Segmentation'].config.freesurfer_subject_id

        if anat_valid_outputs:
            dmri_valid_inputs, dmri_pipeline = cmp.project.init_dmri_project(project, bids_layout, False)
            if dmri_pipeline != None:
                dmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
                dmri_pipeline.atlas_info = anat_pipeline.atlas_info
                # print sys.argv[offset+7]
                if dmri_valid_inputs:
                    print(">> Process diffusion pipeline")
                    dmri_pipeline.process()
                else:
                    print("   ... ERROR : Invalid inputs")
                    sys.exit(1)

            fmri_valid_inputs, fmri_pipeline = cmp.project.init_fmri_project(project, bids_layout, False)
            if fmri_pipeline != None:
                fmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
                fmri_pipeline.atlas_info = anat_pipeline.atlas_info
                fmri_pipeline.subjects_dir = anat_pipeline.stages['Segmentation'].config.freesurfer_subjects_dir
                fmri_pipeline.subject_id = anat_pipeline.stages['Segmentation'].config.freesurfer_subject_id
                print('Freesurfer subjects dir: {}'.format(fmri_pipeline.subjects_dir))
                print('Freesurfer subject id: {}'.format(fmri_pipeline.subject_id))

                # print sys.argv[offset+9]
                if fmri_valid_inputs:
                    print(">> Process fmri pipeline")
                    fmri_pipeline.process()
                else:
                    print("   ... ERROR : Invalid inputs")
                    sys.exit(1)
        else:
            print(msg)
            sys.exit(1)



# Old version with sys.argv for managing script arguments
#     argc = len(sys.argv)

#     if (argc==6) or (argc==7): # connectomemapper bids_folder output_dir sub-<label> (ses-<label>) anatomical_ini_file process_anatomical

#         project = cmp.project.CMP_Project_Info()
#         project.base_directory = os.path.abspath(sys.argv[1])
#         project.output_directory = os.path.abspath(sys.argv[2])
#         project.subjects = ['%s' % sys.argv[3]]
#         project.subject = '%s' % sys.argv[3]
        
#         try:
#             bids_layout = BIDSLayout(project.base_directory)
#         except:
#             print("Exception : Raised at BIDSLayout")
#             sys.exit(1)

#         if "ses-" in sys.argv[4]:
#             offset = 1
#             project.subject_sessions = ['%s' % sys.argv[4]]
#             project.subject_session = '%s' % sys.argv[4]
#             print("INFO : Detected session(s)")
#         else:
#             print("INFO : No detected session")
#             offset = 0
#             project.subject_sessions = ['']
#             project.subject_session = ''

#         project.anat_config_file = os.path.abspath(sys.argv[offset+4])

#         anat_pipeline = cmp.project.init_anat_project(project, False)
#         if anat_pipeline != None:
#             anat_valid_inputs = anat_pipeline.check_input(bids_layout, gui=False)
#             if anat_valid_inputs and sys.argv[offset+5]:
#                 anat_pipeline.process()
#             elif anat_valid_inputs and sys.argv[offset+5]=='False':
#                 pass
#             else:
#                 sys.exit(1)

#     elif (argc==8) or (argc==9): # connectomemapper bids_folder output_dir sub-<label> (ses-<label>) anatomical_ini_file process_anatomical diffusion_ini_file process_diffusion

#         project = cmp.project.CMP_Project_Info()
#         project.base_directory = os.path.abspath(sys.argv[1])
#         project.output_directory = os.path.abspath(sys.argv[2])
#         project.subjects = ['%s' % sys.argv[3]]
#         project.subject = '%s' % sys.argv[3]

#         try:
#             bids_layout = BIDSLayout(project.base_directory)
#         except:
#             sys.exit(1)

#         if "ses-" in sys.argv[4]:
#             offset = 1
#             project.subject_sessions = ['%s' % sys.argv[4]]
#             project.subject_session = '%s' % sys.argv[4]
#         else:
#             offset = 0
#             project.subject_sessions = ['']
#             project.subject_session = ''

#         project.anat_config_file = os.path.abspath(sys.argv[offset+4])
#         project.dmri_config_file = os.path.abspath(sys.argv[offset+6])

#         anat_pipeline = cmp.project.init_anat_project(project, False)
#         if anat_pipeline != None:
#             anat_valid_inputs = anat_pipeline.check_input(bids_layout, gui=False)

#             if anat_valid_inputs and sys.argv[offset+5]=='True':
#                 print(">> Process anatomical pipeline")
#                 anat_pipeline.process()
#             elif anat_valid_inputs and sys.argv[offset+5]=='False':
#                 print(">> Collecting precomputed anatomical pipeline")
#                 pass
#             else:
#                 print("ERROR : Invalid inputs")
#                 sys.exit(1)

#         anat_valid_outputs, msg = anat_pipeline.check_output()

#         if anat_valid_outputs:
#             dmri_valid_inputs, dmri_pipeline = cmp.project.init_dmri_project(project, bids_layout, False)
#             if dmri_pipeline != None:
#                 dmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
#                 dmri_pipeline.atlas_info = anat_pipeline.atlas_info
#                 #print sys.argv[offset+7]
#                 if dmri_valid_inputs and sys.argv[offset+7]=='True':
#                     dmri_pipeline.process()
#                 else:
#                     sys.exit(1)
#         else:
#             print msg
#             sys.exit(1)

#     elif (argc==10) or (argc==11): # connectomemapper bids_folder output_dir sub-<label> (ses-<label>) anatomical_ini_file process_anatomical diffusion_ini_file process_diffusion fmri_ini_file process_fmri

#         project = cmp.project.CMP_Project_Info()
#         project.base_directory = os.path.abspath(sys.argv[1])
#         project.output_directory = os.path.abspath(sys.argv[2])
#         project.subjects = ['%s' % sys.argv[3]]
#         project.subject = '%s' % sys.argv[3]

#         try:
#             bids_layout = BIDSLayout(project.base_directory)
#         except:
#             print("Exception : {}".format(project.base_directory))
#             print("Exception : {}".format(bids_layout))
#             sys.exit(1)

#         if "ses-" in sys.argv[4]:
#             offset = 1
#             project.subject_sessions = ['%s' % sys.argv[4]]
#             project.subject_session = '%s' % sys.argv[4]
#         else:
#             offset = 0
#             project.subject_sessions = ['']
#             project.subject_session = ''

#         project.anat_config_file = os.path.abspath(sys.argv[offset+4])
#         project.dmri_config_file = os.path.abspath(sys.argv[offset+6])
#         project.fmri_config_file = os.path.abspath(sys.argv[offset+8])

#         anat_pipeline = cmp.project.init_anat_project(project, False)
#         if anat_pipeline != None:
#             anat_valid_inputs = anat_pipeline.check_input(bids_layout,gui=False)

#             if anat_valid_inputs and sys.argv[offset+5]=='True':
#                 print(">> Process anatomical pipeline")
#                 anat_pipeline.process()
#             elif anat_valid_inputs and sys.argv[offset+5]=='False':
#                 print(">> Collecting precomputed anatomical pipeline")
#                 pass
#             else:
#                 print("ERROR : Invalid inputs")
#                 sys.exit(1)

#         anat_valid_outputs, msg = anat_pipeline.check_output()

#         if anat_valid_outputs:
#             dmri_valid_inputs, dmri_pipeline = cmp.project.init_dmri_project(project, bids_layout, False)
#             if dmri_pipeline != None:
#                 dmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
#                 dmri_pipeline.atlas_info = anat_pipeline.atlas_info
#                 # print sys.argv[offset+7]
#                 if dmri_valid_inputs and sys.argv[offset+7]=='True':
#                     print(">> Process diffusion pipeline")
#                     dmri_pipeline.process()
#                 else:
#                     print("WARNING: Diffusion pipeline set to not be executed")

#             fmri_valid_inputs, fmri_pipeline = cmp.project.init_fmri_project(project, bids_layout, False)
#             if fmri_pipeline != None:
#                 fmri_pipeline.parcellation_scheme = anat_pipeline.parcellation_scheme
#                 fmri_pipeline.atlas_info = anat_pipeline.atlas_info
#                 # print sys.argv[offset+9]
#                 if fmri_valid_inputs and sys.argv[offset+9]=='True':
#                     print(">> Process fmri pipeline")
#                     fmri_pipeline.process()
#                 else:
#                     print("WARNING: Diffusion pipeline set to not be executed")
#         else:
#             print(msg)
#             sys.exit(1)

#     else:
#         usage()
#         sys.exit(2)